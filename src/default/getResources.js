function getObject(theObject, key, value) {
  let result = [];
  if(theObject instanceof Array) {
    for(let i = 0; i < theObject.length; i++) {
      result = result.concat(getObject(theObject[i], key, value));
    }
  } else {
    for(const prop in theObject) {
      if(prop === key) {
        if(theObject[prop] === value) {
          result.push(theObject);
          break;
        }
      }
      if(prop === 'children') {
        result = result.concat(getObject(theObject[prop], key, value));
      }
    }
  }

  return result;
}

export default function(result) {
  let scripts = getObject(result, 'type', 'script');
  let stylesheets = getObject(result, 'name', 'link');

  scripts = scripts.filter((script) => {
    return script.hasOwnProperty('attribs') && script.attribs.hasOwnProperty('src');
  });

  stylesheets = stylesheets.filter((stylesheet) => {
    return stylesheet.hasOwnProperty('attribs') && stylesheet.attribs.hasOwnProperty('rel') && stylesheet.attribs.rel === 'stylesheet';
  });

  scripts = scripts.map((script) => {
    return script.attribs.src;
  });

  stylesheets = stylesheets.map((stylesheet) => {
    return stylesheet.attribs.href;
  });

  return scripts.concat(stylesheets);
}
