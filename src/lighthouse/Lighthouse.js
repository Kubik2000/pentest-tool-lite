// @flow
import Result, { TYPE_OK, TYPE_INCORRECT, TYPE_ERROR } from '../pentest/Result';

export default class Lighthouse {
  request: Object;
  logger: Object;
  
  /**
   * 
   * @param {Function} fetch
   */
  constructor(request: Object, logger: Object) {
    this.request = request;
    this.logger = logger;
  }

  /**
   * 
   * @param {string} url
   * @returns {Promise}
   */
  async execute(url: string): Promise<Object> {
    
    this.logger.verbose('Executing lighthouse test...');

    const lighthouse = require('lighthouse');
    const chromeLauncher = require('chrome-launcher');
    const logLighthouse = require('lighthouse-logger');
    const configLighthouse = require('./config.js');

    const flags = {
      chromeFlags: ['--headless'],
    };

    launchChromeAndRunLighthouse(url, flags, configLighthouse).then(results => {
      let obj = results.audits;
      let items = Object.values(obj);

      for (let i=0; i<items.length; i++) {
        console.log(items[i].score + ' ' + items[i].title);
      }
    });

    return new Result(url, TYPE_OK, []);

    function launchChromeAndRunLighthouse(url, opts, config = null) {
      return chromeLauncher.launch({chromeFlags: opts.chromeFlags}).then(chrome => {
        opts.port = chrome.port;
        return lighthouse(url, opts, config).then(results => {
          return chrome.kill().then(() => results.lhr);
        });
      });
    }
  };
}