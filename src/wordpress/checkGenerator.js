import outcome from '../outcome';

function getObject(theObject, key, value) {
  let result = [];
  if(theObject instanceof Array) {
    for(let i = 0; i < theObject.length; i++) {
      result = result.concat(getObject(theObject[i], key, value));
    }
  } else {
    for(const prop in theObject) {
      if(prop === key) {
        if(theObject[prop] === value) {
          result.push(theObject);
          break;
        }
      }
      if(prop === 'children') {
        result = result.concat(getObject(theObject[prop], key, value));
      }
    }
  }

  return result;
}

export default function(result) {
  const metas = getObject(result, 'name', 'meta');

  const generator = metas.filter((meta) => {
    return meta.hasOwnProperty('attribs') && meta.attribs.hasOwnProperty('name') && meta.attribs.name === 'generator';
  });

  if (generator.length > 0 && generator[0].attribs.content.toLowerCase().startsWith('wordpress')) {
    outcome.warning('wordpress', '', 'WordPress version is visible!');
  }

  return result;
}
