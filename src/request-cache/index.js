import request from 'request';
import winston from 'winston';

class RequestCache {
  constructor() {
    this.requests = {};
  }

  request(options, callback) {
    let url = options;

    if( typeof options === 'object' ) {
      url = options.url;
    }

    if( !this.requests.hasOwnProperty(url) ) {
      const requests = this.requests;
      winston.verbose('Requesting', url);
      request.get(options, function(error, response, body) {
        const headers = {};
        Object.keys(response.headers).forEach((key, value) => {
          headers[key.toLowerCase()] = response.headers[key];
        });
        response.headers = headers;
        requests[url] = {
          error: error,
          response: response,
          body: body,
        };
        callback(error, response, body);
      });
    } else {
      winston.verbose('Returning from cache', url);
      callback(this.requests[url].error, this.requests[url].response, this.requests[url].body);
    }
  }
}

export default new RequestCache();
