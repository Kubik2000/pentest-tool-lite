import winston from 'winston';

class Outcome {
  constructor() {
    this.messages = {};
  }

  addMessage(message) {
    this.messages.push(message);
  }

  newMessage(namespace, type, text) {
    if (!this.messages.hasOwnProperty(namespace)) {
      this.messages[namespace] = [];
    }
    this.messages[namespace].push({ type: type, text: text });
  }

  info(namespace, text) {
    this.newMessage(namespace, 'info', text);
  }

  warning(namespace, text) {
    this.newMessage(namespace, 'warning', text);
  }

  error(namespace, text) {
    this.newMessage(namespace, 'error', text);
  }

  print() {
    winston.info('Outcome.print()');
    const keys = Object.keys(this.messages);
    keys.forEach((key) => {
      winston.info('----------->', key);
      for( let i = 0; i < this.messages[key].length; i++ ) {
        this.printMessage(this.messages[key][i]);
      }
    });
  }

  printMessage(message) {
    if( message.type === 'info' ) {
      winston.info(message.text);
    } else if( message.type === 'warning' ) {
      winston.warn(message.text);
    } else if( message.type === 'error' ) {
      winston.error(message.text);
    }
  }
}

export default new Outcome();
