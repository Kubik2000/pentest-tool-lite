import Test, { TestParameters, Result } from '../Test';
import request from '../request';
import logger from '../logger';

/**
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
 */
class PermissionsPolicy extends Test {
  public async test({ url }: TestParameters): Promise<Result> {
    logger.info('Starting PermissionsPolicy test...');
    const response = await request.get(url);

    if (!Object.prototype.hasOwnProperty.call(response.headers, 'permissions-policy')) {
      return {
        status: 'ERROR',
        title: 'Permissions-Policy',
        description: 'Response headers does not contain permissions-policy header!',
      };
    }

    const permissionsArray = ['accelerometer', 'geolocation', 'midi', 'notifications', 'push', 'sync-xhr', 
    'microphone', 'camera', 'magnetometer', 'gyroscope', 'speaker', 'vibrate', 'fullscreen', 'payment', 'usb'];

    const attributesList = response.headers['permissions-policy'];
    let subChecks = [];
    subChecks = this.checkPermission(permissionsArray, attributesList);

    return {
      status: subChecks.some(check => check.status === 'WARNING') ? 'WARNING' : 'SUCCESS',
      title: 'Permissions-Policy',
      description: '',
      results: subChecks,
    };
  }
  
  private checkPermission(permissionsArray: string[], attributes: string): Result[] {
    return  permissionsArray.map((permissionName) => {
      if (!attributes.includes(permissionName)) {
        return {
          status: 'WARNING',
          title: 'Permissions-Policy',
          description: `Permission ${permissionName} is missing.`,
        };
      }
      return {
        status: 'SUCCESS',
        title: 'Permissions-Policy',
        description: `Permission ${permissionName} is present.`,
      };
    });
  }
}

export default PermissionsPolicy;
