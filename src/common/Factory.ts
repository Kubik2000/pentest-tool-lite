import Request from './Request';
import UnlimitedCache from './request/UnlimitedCache';
import Logger from './Logger';
import parseHtml from '../functions/parseHtml';
import getResources from '../functions/getResources';
import BlackHoleCache from './request/BlackHoleCache';

class Factory implements FactoryInterface {
  protected config: any;

  protected request: RequestInterface = null;

  protected logger: LoggerInterface = null;

  constructor(config: any) {
    this.config = config;
  }

  getRequest(): RequestInterface {
    if (this.request === null) {
      const cache = this.config.request.cache.type === 'UNLIMITED' ? new UnlimitedCache() : new BlackHoleCache();
      this.request = new Request(cache, this.getLogger());
    }
    return this.request;
  }

  getLogger(): LoggerInterface {
    if (this.logger === null) {
      this.logger = new Logger(this.config.logger.level);
    }
    return this.logger;
  }

  getParseHTML(): Function {
    return parseHtml;
  }

  getGetResources(): Function {
    return getResources;
  }
}

export default Factory;
