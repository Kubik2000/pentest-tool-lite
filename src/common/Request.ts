import request from 'request';

class Request implements RequestInterface {
  protected cache: CacheInterface;

  protected logger: LoggerInterface;

  constructor(cache: CacheInterface, logger: LoggerInterface) {
    this.cache = cache;
    this.logger = logger;
  }

  get(url: string, followRedirect: boolean = true): Promise<any> {
    return new Promise((resolve, reject) => {
      if (this.cache.has(url)) {
        this.logger.debug(`Returning from cache ${url}...`);
        return resolve(this.cache.get(url));
      }

      this.logger.debug(`Requesting ${url}...`);
      request.get({ url, followRedirect }, (error, response, body) => {
        this.cache.add(url, {
          url: url,
          error: error,
          response: response,
          body: body,
        });

        resolve({
          url: url,
          error: error,
          response: response,
          body: body,
        });
      });
    });
  }
}

export default Request;
