import request from 'request';

class Request implements IRequest {
  protected cache: ICache;

  protected logger: ILogger;

  constructor(cache: ICache, logger: ILogger) {
    this.cache = cache;
    this.logger = logger;
  }

  public get(url: string, followRedirect: boolean = true): Promise<any> {
    return new Promise((resolve, reject) => {
      if (this.cache.has(url)) {
        this.logger.debug(`Returning from cache ${url}...`);
        return resolve(this.cache.get(url));
      }

      this.logger.debug(`Requesting ${url}...`);
      request.get({ url, followRedirect }, (error, response, body) => {
        if(response === undefined) {
          this.logger.error(`The URL - ${url} - doesn't exist.`);
          this.logger.error(`${error}`);
        } else {
          this.cache.add(url, {
            body,
            error,
            response,
            url,
          });

          resolve({
            body,
            error,
            response,
            url,
          });
        }
      });
    });
  }
}

export default Request;
