import winston from 'winston';
import report from '../report';

class Pentest {
  constructor() {
    this.namespaces = [
      {
        namespace: 'root',
        parent: null,
      },
    ];
    this.tests = [];
  }

  add(name, callback) {
    const namespace = this.getNamespace(this.namespaces[0]);
    this.tests.push({
      namespace: namespace,
      name: name,
      callback: callback,
    });
    winston.debug('Add pentest ', namespace + '.' + name);
  }

  getNamespace(namespace) {
    const names = [];
    let n = namespace;
    while (n !== null) {
      names.push(n.namespace);
      n = n.parent;
    }
    return names.reverse().join('.');
  }

  namespace(namespace, callback) {
    const parent = this.namespaces[0];
    this.namespaces.unshift({
      namespace: namespace,
      parent: parent,
    });
    callback();
    this.namespaces.shift();
  }

  run(url, grep) {
    this.tests = this.tests.filter((test) => {
      return test.name.indexOf(grep) > -1 || test.namespace.indexOf(grep) > -1;
    });

    winston.verbose('URL: ', url);
    winston.verbose('Number of tests:', this.tests.length);

    return this.tests.reduce((p, test) => {
      return p.then(test.callback)
        .then((results) => {
          if (!Array.isArray(results)) {
            results = [ results ];
          }

          results.forEach((result) => {
            const importance = result.importance || 50;
            result.messages.length > 0 && report.add(test.namespace, result.url, result.messages.shift(), result.messages.join('\n').trim(), false, importance);
            result.errors.length > 0 && report.add(test.namespace, result.url, result.errors.shift(), result.errors.join('\n').trim(), true, importance);
          });
        })
        .then(() => { return url; });
    }, Promise.resolve(url)).catch((error) => {
      console.log('The process ended with error!\n');
      console.log('You can open an issue on GitHub: https://github.com/juffalow/pentest-tool-lite/issues');
      console.log('Please, if you do so, add there this error message:\n');
      console.log('Node version:', process.version);
      console.log('Command:', process.argv.join(' '));
      console.log('Error message:', error.message);
      console.log(error);
    });
  }
}

const pentest = new Pentest();

export default pentest;
