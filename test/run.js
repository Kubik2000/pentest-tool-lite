import sinon from 'sinon';
import chai from 'chai';
const expect = chai.expect;
import defaultChecks from '../src/default';
import resourcesChecks from '../src/resources';
import referencesChecks from '../src/references';
import wordpressChecks from '../src/wordpress';
import run from '../src/run.js';

describe('test run', function() {
  let sandbox;
  let defaultCheckSpy;
  let resourcesCheckSpy;
  let referencesCheckSpy;
  let wordpressCheckSpy;

  beforeEach(function() {
    sandbox = sinon.sandbox.create();
    defaultCheckSpy = sinon.spy();
    resourcesCheckSpy = sinon.spy();
    referencesCheckSpy = sinon.spy();
    wordpressCheckSpy = sinon.spy();
    sandbox.stub(defaultChecks, 'check').callsFake(defaultCheckSpy);
    sandbox.stub(resourcesChecks, 'check').callsFake(resourcesCheckSpy);
    sandbox.stub(referencesChecks, 'check').callsFake(referencesCheckSpy);
    sandbox.stub(wordpressChecks, 'check').callsFake(wordpressCheckSpy);
  });

  afterEach(function() {
    sandbox.restore();
  });

  it('should call all checks', () => {
    const options = {
      onlySelected: false,
    };

    Promise.resolve(run('url', options)).then(() => {
      expect(defaultCheckSpy.called).to.be.true;
      expect(resourcesCheckSpy.called).to.be.true;
      expect(referencesCheckSpy.called).to.be.true;
      expect(wordpressCheckSpy.called).to.be.true;
    });
  });

  it('should call only default checks', () => {
    const options = {
      onlySelected: true,
      default: true,
    };

    Promise.resolve(run('url', options)).then(() => {
      expect(defaultCheckSpy.called).to.be.true;
      expect(resourcesCheckSpy.called).to.be.false;
      expect(referencesCheckSpy.called).to.be.false;
      expect(wordpressCheckSpy.called).to.be.false;
    });
  });

  it('should call only resources checks', () => {
    const options = {
      onlySelected: true,
      resources: true,
    };

    Promise.resolve(run('url', options)).then(() => {
      expect(defaultCheckSpy.called).to.be.false;
      expect(resourcesCheckSpy.called).to.be.true;
      expect(referencesCheckSpy.called).to.be.false;
      expect(wordpressCheckSpy.called).to.be.false;
    });
  });

  it('should call only references checks', () => {
    const options = {
      onlySelected: true,
      references: true,
    };

    Promise.resolve(run('url', options)).then(() => {
      expect(defaultCheckSpy.called).to.be.false;
      expect(resourcesCheckSpy.called).to.be.false;
      expect(referencesCheckSpy.called).to.be.true;
      expect(wordpressCheckSpy.called).to.be.false;
    });
  });

  it('should call only wordpress checks', () => {
    const options = {
      onlySelected: true,
      wordpress: true,
    };

    Promise.resolve(run('url', options)).then(() => {
      expect(defaultCheckSpy.called).to.be.false;
      expect(resourcesCheckSpy.called).to.be.false;
      expect(referencesCheckSpy.called).to.be.false;
      expect(wordpressCheckSpy.called).to.be.true;
    });
  });
});
